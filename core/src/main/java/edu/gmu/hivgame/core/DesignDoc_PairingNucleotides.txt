Design doc for getting nucleotides to pair into double strands

**Note: UNA = Unpaired Nucleotide A (in strand A of a double helix)
- Nucleotide x collision with another nucleotide y:
- Nucleotide.handleCollison() (from interface CollisionHandler)
- x is already in a DNAStrand and is responsible for grabbing y if
  it is a free Nucleotide
- y will do nothing
- x Checks if y is free
- x checks if x is in a strand
- x checks if x is unpaired
- Invoke DNAStrand.alert(x,y) for x's DNAStrand called S
- In S.alert(x,y) double-check assumptions
- S checks if it is in a DoubleHelix D and invokes D.alert(x,y)
- D double-checks assumptions
- D invokes x.basePair(y) which creates the physical connection
(probably rope joints)
- D checks for Nucleotides x and y matching, maintains count of
  matched/mismatched Nucleotides
- D adds y to the end of D.strandB; D.strandA is always the complete
  strand with the active Nucleotide while D.strandB grows; creates
  physical connection to another Nucleotide in strandB
- D invokes evalUNA() to update which is the unpaired nucleotide in
  D.strandA

Design for binding/unbinding of RT:
- When alert() in DoubleHelix is called, if successful
  (UNA has become paired with another nucleotide), then
  ReverseTranscriptase's unbindUNA() is called. There is no
  call to bindUNA() immediately following; instead, in LevelTwo's
  update() method, bindUNA() will be called if UNA is in contact
  with the RT and not already bound.

Meet again next Tuesday!
Graphics are next! Make RT look pretty, give strands a backbone
